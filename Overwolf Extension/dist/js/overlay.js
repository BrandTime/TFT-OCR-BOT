/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/overlay/overlay.ts":
/*!********************************!*\
  !*** ./src/overlay/overlay.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.overlay = exports.Overlay = void 0;
class Overlay {
    constructor() {
        this.players = [];
        this.selfName = "";
        this.path = "E:\\Development\\Python\\TFT-OCR-BOT-main\\live_data\\";
        this.g_interestedInFeatures = [
            'counters',
            'match_info',
            'me',
            'roster',
            'store',
            'board',
            'bench',
            'carousel',
            'live_client_data'
        ];
        this.setup();
    }
    setup() {
        overwolf.games.onGameInfoUpdated.addListener((res) => {
            console.debug("onGameInfoUpdated", res);
            if (res.gameChanged) {
                this.players = [];
            }
            if (Overlay.gameLaunched(res)) {
                this.registerEvents();
                setTimeout(() => this.setFeatures(), 1000);
            }
        });
        overwolf.games.getRunningGameInfo((res) => {
            console.debug("getRunningGameInfo", res);
            if (Overlay.gameRunning(res)) {
                this.registerEvents();
                setTimeout(() => this.setFeatures(), 1000);
            }
            else {
                this.players = [];
            }
        });
        overwolf.games.launchers.events.getInfo(10902, info => {
            if (info.success) {
                this.selfName = info.res.summoner_info.display_name;
            }
        });
        this.setPosition();
    }
    setFeatures() {
        overwolf.games.events.setRequiredFeatures(this.g_interestedInFeatures, (info) => {
            if (!info.success) {
                window.setTimeout(() => this.setFeatures(), 2000);
                return;
            }
            console.info("Set required features:");
            console.info(JSON.stringify(info));
        });
    }
    handleEvent(info) {
        const feature = info.feature;
        const key = info.key;
        if (feature === "roster" && key === "player_status") {
            this.handleRoster(info.value);
        }
        else if (feature === "match_info" && key === "opponent") {
            this.setLastOpponent(info.value);
        }
    }
    handleRoster(jsonStr) {
        const roster = JSON.parse(jsonStr);
        const players = [];
        for (const name in roster) {
            const playerData = roster[name];
            playerData.name = name;
            players.push(playerData);
        }
        players.sort((a, b) => a.index - b.index);
        if (players.length) {
            if (this.players.length && players.length) {
                this.updateRoster(players);
            }
            else {
                this.setupRoster(players);
            }
        }
    }
    async setupRoster(players) {
        if (!this.selfName) {
            this.selfName = await this.getSummonerName();
        }
        this.reset();
        players.forEach((data, i) => {
            if (data.name !== this.selfName) {
                const box = document.querySelector(`#box-${i}`);
                const player = { name: data.name, box: box };
                player.box.style.borderColor = "green";
                this.players.push(player);
            }
        });
        this.setPosition();
    }
    updateRoster(players) {
        const me = players.find(player => player.name === this.selfName);
        if (me && me.health <= 0) {
            this.reset();
            return;
        }
        this.players.forEach(player => {
            players.forEach(data => {
                if (player.name === data.name && data.health <= 0) {
                    this.removePlayer(data.name.trim());
                }
            });
        });
    }
    removePlayer(name) {
        const player = this.players.find(player => player.name.trim() === name.trim());
        const index = this.players.indexOf(player);
        if (index !== -1) {
            this.players.splice(index, 1);
            player.box.style.borderColor = "transparent";
            this.clear();
        }
    }
    setLastOpponent(jsonStr) {
        if (this.players.length === 0) {
            return;
        }
        const opponentName = JSON.parse(jsonStr).name.trim();
        const opponent = this.players.find(player => player.name === opponentName);
        const index = this.players.indexOf(opponent);
        if (index !== -1) {
            this.players.splice(index, 1);
            this.players.push(opponent);
            opponent.box.style.borderColor = "red";
        }
        this.updateOverlay();
    }
    updateOverlay() {
        const potentialCount = this.players.length > 3 ? 3 : this.players.length - 1;
        this.players.slice(0, potentialCount).forEach(player => {
            player.box.style.borderColor = "green";
        });
    }
    clear() {
        this.players.forEach(player => {
            player.box.style.borderColor = "green";
        });
    }
    reset() {
        document.querySelectorAll(`.box`).forEach((box) => box.style.borderColor = "transparent");
        this.players = [];
    }
    setDebug() {
        const debugEl = document.querySelector(".debug");
        debugEl.innerHTML = `${this.selfName}<br>${this.players.map(player => player.name).join("<br>")}`;
        setTimeout(() => this.setDebug(), 1000);
    }
    registerEvents() {
        console.info("register events");
        overwolf.games.events.onInfoUpdates.addListener((event) => {
            this.handleEvent(event.info[0]);
        });
        overwolf.games.events.onInfoUpdates2.addListener((event) => {
            switch (event.feature) {
                case "store":
                    if (event.info)
                        overwolf.io.writeFileContents(this.path + "store.txt", JSON.stringify(event.info), "UTF8", false, event => { });
                    break;
                case "board":
                    if (event.info)
                        overwolf.io.writeFileContents(this.path + "board.txt", JSON.stringify(event.info), "UTF8", false, event => { });
                    break;
                case "bench":
                    if (event.info)
                        overwolf.io.writeFileContents(this.path + "bench.txt", JSON.stringify(event.info), "UTF8", false, event => { });
                    break;
            }
        });
    }
    static gameLaunched(gameInfoResult) {
        if (!gameInfoResult) {
            return false;
        }
        if (!gameInfoResult.gameInfo) {
            return false;
        }
        if (!gameInfoResult.runningChanged && !gameInfoResult.gameChanged) {
            return false;
        }
        if (!gameInfoResult.gameInfo.isRunning) {
            return false;
        }
        if (Math.floor(gameInfoResult.gameInfo.id / 10) != 5426) {
            return false;
        }
        console.info("TFT Launched");
        return true;
    }
    static gameRunning(gameInfo) {
        if (!gameInfo) {
            return false;
        }
        if (!gameInfo.isRunning) {
            return false;
        }
        if (Math.floor(gameInfo.id / 10) != 5426) {
            return false;
        }
        console.info("TFT running");
        return true;
    }
    async setPosition() {
        const gameRes = await this.getGameResolution();
        if (gameRes === null) {
            return;
        }
        const appRes = await this.getAppResolution();
        overwolf.windows.changeSize("overlay", 350, 170);
        overwolf.windows.changePosition("overlay", gameRes.width - appRes.width, gameRes.height - appRes.height);
    }
    getGameResolution() {
        return new Promise(resolve => {
            overwolf.games.getRunningGameInfo((result) => {
                if (result && result.logicalWidth) {
                    resolve({
                        width: result.logicalWidth,
                        height: result.logicalHeight
                    });
                }
                else {
                    resolve(null);
                }
            });
        });
    }
    getAppResolution() {
        return new Promise(resolve => {
            overwolf.windows.getCurrentWindow((result) => {
                resolve({
                    width: result.window.width,
                    height: result.window.height
                });
            });
        });
    }
    getSummonerName() {
        return new Promise(resolve => {
            overwolf.games.launchers.events.getInfo(10902, info => {
                if (info.success) {
                    resolve(info.res.summoner_info.display_name);
                }
                else {
                    setTimeout(() => {
                        console.log("Failed to get summoner name, trying again in 2s");
                        resolve(this.getSummonerName());
                    }, 2000);
                }
            });
        });
    }
}
exports.Overlay = Overlay;
exports.overlay = new Overlay();
window.overlay = exports.overlay;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/overlay/overlay.ts"](0, __webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,